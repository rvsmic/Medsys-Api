plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.microsoft.azure.azurewebapp" version "1.7.1"
}

group = 'com.medsys'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudAzureVersion', "5.10.0")
	appNameTest = 'testmedsysapi'
	appNameProd = 'medsysapi'
	profile = System.getProperty('spring.profiles.active', 'dev')
	println "Profile: " + profile
}

azurewebapp {
	subscription = '01c6d3fb-9f96-4450-ac9a-607c96273006'
	resourceGroup = 'medsys'
	pricingTier = 'F1'
	region = 'Poland Central'
	runtime {
		os = 'Linux'
		webContainer = 'Tomcat 10.0'
		javaVersion = 'Java 17'
	}
	appSettings{

	}
	auth {
		type = 'azure_cli' // support azure_cli, oauth2, device_code and service_principal
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.azure.spring:spring-cloud-azure-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'ch.qos.logback:logback-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
}

dependencyManagement {
	imports {
		mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
	}
}

test {
	useJUnitPlatform()
}

tasks.bootRun {
	if (profile == 'dev') {
		systemProperty 'spring.profiles.active', 'dev'
	} else
	if (profile == 'test') {
		systemProperty 'spring.profiles.active', 'test'
	} else
	if (profile == 'prod') {
		systemProperty 'spring.profiles.active', 'prod'
	} else {
		throw new GradleException("Invalid spring.profiles.active value provided. %s".formatted(profile))
	}
}

tasks.bootWar {
	archiveFileName = 'app.war'

	if (profile == 'dev') {
		azurewebapp.appName = 'devapp'
	} else
	if (profile == 'test') {
		azurewebapp.appName = appNameTest
	} else
	if (profile == 'prod') {
		azurewebapp.appName = appNameProd
	} else {
		throw new GradleException("Invalid spring.profiles.active value provided. %s".formatted(profile))
	}
}

tasks.named('test') {
	useJUnitPlatform()

	if (profile == 'dev') {
		systemProperty 'spring.profiles.active', 'dev'
	} else
	if (profile == 'test') {
		systemProperty 'spring.profiles.active', 'test'
	} else
	if (profile == 'prod') {
		systemProperty 'spring.profiles.active', 'prod'
	} else {
		throw new GradleException("Invalid spring.profiles.active value provided. %s".formatted(profile))
	}
}
